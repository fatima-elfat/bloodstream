// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["omitApi", "relationJoins"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  email         String      @unique
  username      String      @unique
  password      String
  mobileNumber  String      @default("")
  dateOfBirth   String      @default("")
  city          String      @default("")
  state         String      @default("")
  bloodType     String      @default("")
  avatar        String?
  isAdmin       Boolean     @default(false)
  isTech        Boolean     @default(false)
  isDonnor      Boolean     @default(false)
  createdAt     DateTime    @default(now())
  tfEnabled     Boolean      @default(false)
  tfSecret      String     @default("")
  tech          Tech?
  donor         Donor?
}

model Tech {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  title      String
  createdAt  DateTime    @default(now())
  user       User?        @relation(fields: [userId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  userId     String?     @unique @db.ObjectId
  bank       Bank?        @relation(fields: [bankId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  bankId     String?      @unique @db.ObjectId
  donation   Donation?
}
model Bank {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  latitude    Float
  longitude   Float
  tech        Tech?
}

model Donation {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  description   String
  bloodGroup    String[]
  level         String
  neededDonors  Int
  createdAt     DateTime    @default(now())
  tech          Tech?        @relation(fields: [techId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  techId        String?      @unique @db.ObjectId
  donationR     DonationRecord?
}

model Donor {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  firstName     String
  lastName      String
  bloodType     String
  lastDonation  DateTime?
  createdAt     DateTime    @default(now())
  user          User?        @relation(fields: [userId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  userId        String?      @unique @db.ObjectId
  donationR     DonationRecord?
}

model DonationRecord {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  bloodVolume   Int
  createdAt     DateTime    @default(now())
  donor         Donor?        @relation(fields: [donorId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  donorId       String?      @unique @db.ObjectId
  donation      Donation?       @relation(fields: [donationId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  donationId    String?      @unique @db.ObjectId
}
